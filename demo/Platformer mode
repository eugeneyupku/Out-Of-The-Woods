import pgzrun
import types
##Initialize
WIDTH,HEIGHT = 384,216
TIME = 0
runlset,runrset,idlelset,idlerset = [],[],[],[] #List of actions' frames
bg1,bg2 = [],[] #Background
ground,layer1 = [],[] #Ground and layer1
spdx = 2 #Speed of moves

##Import images
#Character
for i in range(8):
    runrset.append('run\\runr\\right'+str(i))
    runlset.append('run\\runl\\left'+str(i))
for i in range(12):
    idlerset.append('idle\\idler\\idler'+str(i))
    idlelset.append('idle\\idlel\\idlel'+str(i))
#Background
for i in range(5):
    bg1.append(Actor("background\\plx-" + str(i+1)))
    bg2.append(Actor("background\\plx-" + str(i+1)))
#Floor
for i in range(50):
    ground.append(Actor('tileset\\ground'))
for i in range(10):
    layer1.append(Actor('tileset\\ground'))        

##Setup Character
PLAYER = Actor('idle\idler\idler0')
PLAYER.jumph = 0
PLAYER.frame = 0
PLAYER.state = 'IDLE'
PLAYER.direction = 'RIGHT'

##Setup map
def initializeMap():
    #Player
    PLAYER.topleft = 0,0
    #Background
    for i in range(5):
        bg1[i].topright = WIDTH*0.5,0
        bg2[i].topleft = WIDTH*0.5,0

    #Floor
    for i in range(50):
        ground[i].topright = (i+1)*(ground[i].width-5),HEIGHT - ground[i].height + 2
    for i in range(10):
        layer1[i].bottomright = 5*(i+1)*(ground[i].width),HEIGHT - PLAYER.height-ground[i].height+2

rightLimit,leftLimit = 50*81-WIDTH/2,WIDTH/2 
rightBorder,leftBorder = 50*81-PLAYER.width,PLAYER.width
camCenter = leftBorder

##Combine Lists
tiles = ground + layer1
bg = bg1 + bg2
everything = tiles + bg

##Actor Moves
#Infinite Moves
def moveLeft(act,mode=0): ##Mode 0: Infinite Move; Mode 1: Bordered Move
    if(mode == 1 and act.left <= 0):
        return
    act.left -= spdx
    if(mode == 0 and act.right < 0):
        act.left = WIDTH-2

def moveRight(act,mode=0):
    if(mode == 1 and act.right >= WIDTH):
        return
    act.left += spdx
    if(mode == 0 and act.left > WIDTH):
        act.right = 2

## Move in group
#Background
def bgLeft():
    for i in bg:
        moveLeft(i)
def bgRight():
    for i in bg:
        moveRight(i)
#Floor
def floorLeft():
    for i in tiles:
        i.left -= spdx
def floorRight():
    for i in tiles:
        i.left += spdx

#Screen
def screenLeft():
    global camCenter
    camCenter += spdx
    if(camCenter > rightBorder):
        camCenter = rightBorder
    if(rightLimit <= camCenter):
        PLAYER.moveRight(1)
    elif(camCenter <= leftLimit):
        PLAYER.moveRight(1)
    else:
        bgLeft()
        floorLeft()
def screenRight():
    global camCenter
    camCenter -= spdx
    if(camCenter < leftBorder):
        camCenter = leftBorder
    if(camCenter <= leftLimit):
        PLAYER.moveLeft(1)
    elif(rightLimit <= camCenter):
        PLAYER.moveLeft(1)
    else:
        bgRight()
        floorRight()

#Collision
def collideFloor():
    for i in tiles:
        if(PLAYER.colliderect(i) and i.top-spdx<= PLAYER.bottom <= i.top+spdx):
            return True
    return False

## Set Attribute
PLAYER.__setattr__('moveRight',types.MethodType(moveRight,PLAYER))
PLAYER.__setattr__('moveLeft',types.MethodType(moveLeft,PLAYER))

def drawStage1():
    for i in bg:
        i.draw()
    for i in tiles:
        i.draw()
##Draw & Update
def draw():
    screen.clear()
    drawStage1()
    PLAYER.draw()

def update():
    global PLAYER
    PLAYER.floor = collideFloor()
    ##JUMP
    if(keyboard.up and PLAYER.state != 'FALL' and PLAYER.state != 'JUMP'):
        PLAYER.jumph = 0
        PLAYER.state = 'JUMP'
    if(PLAYER.state == 'JUMP'):
        if(PLAYER.direction == 'RIGHT'):
            PLAYER.image = 'jump\\jumpr'
        elif (PLAYER.direction == 'LEFT'):
            PLAYER.image = 'jump\\jumpl'
        PLAYER.top -= spdx*1.5
        PLAYER.jumph += spdx*1.5
        if(keyboard.right):
            PLAYER.direction = 'RIGHT'
            screenLeft()
        elif(keyboard.left):
            PLAYER.direction = 'LEFT'
            screenRight()
        if(PLAYER.jumph >= 80):
            PLAYER.state = 'FALL'
        return
    if not PLAYER.floor:
        PLAYER.state = 'FALL'
    if(PLAYER.state == 'FALL'):
        if(PLAYER.direction == 'RIGHT'):
            PLAYER.image = 'landing\\landingr'
        elif (PLAYER.direction == 'LEFT'):
            PLAYER.image = 'landing\\landingl'
        PLAYER.top += spdx*1.5
        PLAYER.jumph -= spdx*1.5
        if(keyboard.right):
            PLAYER.direction = 'RIGHT'
            screenLeft()
        elif(keyboard.left):
            PLAYER.direction = 'LEFT'
            screenRight()
        if collideFloor():
            PLAYER.state = 'IDLE'
        return
    ##MOVE RIGHT    
    if(keyboard.right):
        if(PLAYER.state != 'RUN'):
            PLAYER.frame = 0
        PLAYER.state,PLAYER.direction = 'RUN','RIGHT'
        PLAYER.frame += 0.25
        PLAYER.image = runrset[int(PLAYER.frame)%8]
        screenLeft()
        return
    ##MOVE LEFT
    elif(keyboard.left): 
        if(PLAYER.state != 'RUN'):
            PLAYER.frame = 0
        PLAYER.state,PLAYER.direction = 'RUN','LEFT'
        PLAYER.frame += 0.25
        PLAYER.image = runlset[int(PLAYER.frame)%8]
        screenRight()
        return
    if(PLAYER.state != 'IDLE'):
        PLAYER.frame = 0
    PLAYER.state = 'IDLE'
    ##IDLE
    if(PLAYER.state == 'IDLE' and PLAYER.direction == 'LEFT'): 
        PLAYER.frame += 0.25
        PLAYER.image = idlelset[int(PLAYER.frame)%12]
    elif(PLAYER.state == 'IDLE' and PLAYER.direction == 'RIGHT'):
        PLAYER.frame += 0.25
        PLAYER.image = idlerset[int(PLAYER.frame)%12]
initializeMap()
pgzrun.go()
